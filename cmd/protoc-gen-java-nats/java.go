package main

import (
	"bytes"
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"path"
	"strings"
	"xiam.li/protonats/go/plugin"
)

type JavaImportPackage string

func (j JavaImportPackage) String() string {
	return string(j)
}

func (j JavaImportPackage) Ident(class string) JavaImport {
	return JavaImport{Package: j, Class: class}
}

type JavaImport struct {
	Package  JavaImportPackage
	Class    string
	SubClass string
}

func (j JavaImport) Import() string {
	return string(j.Package) + "." + j.Class
}

func (j JavaImport) FQDN() string {
	fqdn := string(j.Package)
	fqdn += "." + j.Class
	if j.SubClass != "" {
		fqdn += "." + j.SubClass
	}
	return fqdn
}

func (j JavaImport) Is(other JavaImport) bool {
	return j.FQDN() == other.FQDN()
}

type JavaGeneratedFile struct {
	imports []string
	buf     bytes.Buffer
}

func (j *JavaGeneratedFile) P(v ...any) {
	for _, x := range v {
		switch x := x.(type) {
		case JavaImport:
			j.imports = append(j.imports, x.Import())
			if _, err := fmt.Fprint(&j.buf, x.FQDN()); err != nil {
				panic(err)
			}
		default:
			if _, err := fmt.Fprint(&j.buf, x); err != nil {
				panic(err)
			}
		}
	}
	if _, err := fmt.Fprintln(&j.buf); err != nil {
		panic(err)
	}
}

func (j *JavaGeneratedFile) Finalize(gen *protogen.Plugin, file *protogen.File) {
	// Retrieve Java package and class options
	javaPackage := file.Proto.GetOptions().GetJavaPackage()
	if javaPackage == "" {
		if protoPkg := file.Proto.GetPackage(); protoPkg != "" {
			javaPackage = protoPkg
		} else {
			javaPackage = "pb" // Fallback if no java_package is defined
		}
	}
	javaClassname := file.Proto.GetOptions().GetJavaOuterClassname()
	if javaClassname == "" {
		//goland:noinspection GoDeprecation
		javaClassname = strings.Title(file.GeneratedFilenamePrefix) // Generate a classname if not defined
	}
	javaClassname += "Service"

	// Define the output filename
	packagePath := strings.ReplaceAll(javaPackage, ".", "/")
	outputFileName := path.Join(packagePath, javaClassname+".java")

	// Write the file
	outputFile := gen.NewGeneratedFile(outputFileName, "")
	outputFile.P("// Code generated by protoc-gen-java-nats. DO NOT EDIT.")
	outputFile.P("// Versions:")
	outputFile.P("// - protoc-gen-java-nats ", version)
	outputFile.P("// - protoc        v", plugin.ProtocVersion(gen))
	outputFile.P("// source: ", file.Desc.Path())
	if file.Proto.GetOptions().GetDeprecated() {
		outputFile.P("// ", file.Desc.Path(), " is a deprecated file.")
	}
	outputFile.P("package ", javaPackage, ";")
	outputFile.P()
	for _, i := range j.imports {
		outputFile.P("import ", i, ";")
	}
	if len(j.imports) > 0 {
		outputFile.P()
	}
	outputFile.P("public class ", javaClassname, " {")
	written, err := outputFile.Write(j.buf.Bytes())
	if err != nil {
		panic(err)
	}
	if written == 0 || written < len(j.buf.Bytes()) {
		panic("Failed to write the entire buf")
	}
	outputFile.P("}")
}
